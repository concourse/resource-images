#!/bin/bash
# vim: set ft=sh

set -e -x

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.bash

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXX)
cat > $payload <&0

repository="$(jq -r '.source.repository // ""' < $payload)"
tag="$(jq -r '.source.tag // "latest"' < $payload)"
image="$(jq -r '.version.image // ""' < $payload)"

if [ -z "$repository" ]; then
  echo "must specify repository"
  exit 1
fi

tags=$(mktemp /tmp/resource-in-tags.XXXXX)
curl "https://index.docker.io/v1/repositories/${repository}/tags" > $tags

shortened_image=$(jq -r "map(select(.name == $(echo $tag | jq -R .)))[].layer" < $tags)

all_images=$(mktemp /tmp/resource-in-tags.XXXXX)
curl "https://index.docker.io/v1/repositories/${repository}/images" > $all_images

latest_image=$(jq -r "map(select(.id | startswith($(echo $shortened_image | jq -R .))))[0].id" < $all_images)

if [ -z "$latest_image"] && ! [ -z "$shortened_image" ]; then
  echo "failed to expand image id. :("
  exit 1
fi

if [ -z "$latest_image" ] || [ "$latest_image" = "$image" ]; then
  echo "[]" >&3
else
  jq -n "[{ image: $(echo $latest_image | jq -R .) }]" >&3
fi

rm $payload $tags $all_images
